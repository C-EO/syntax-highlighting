<Normal Text>initialization</Normal Text><br/>
<Normal Text>n       equ   20</Normal Text><br/>
<Normal Text>start   equ   $40</Normal Text><br/>
<Normal Text>wddr    equ   $0</Normal Text><br/>
<Normal Text>cddr    equ   $0</Normal Text><br/>
<Normal Text>input   equ   $ffe0</Normal Text><br/>
<Normal Text>output  equ   $ffe1</Normal Text><br/>
<Normal Text>;</Normal Text><br/>
<Normal Text>        org   p:start</Normal Text><br/>
<Normal Text>        move  #wddr,r0  ;r0 ¬ samples</Normal Text><br/>
<Normal Text>        move  #cddr,r4  ;r1 ¬ coefﬁcients</Normal Text><br/>
<Normal Text>        move  #n-1,m0   ;set modulo arithmetic</Normal Text><br/>
<Normal Text>        move  m0,m4     ;for the 2 circular buffers</Normal Text><br/>
<Normal Text>;</Normal Text><br/>
<Normal Text>        opt   cc</Normal Text><br/>
<Normal Text>;       filter loop :8+(n-1) cycles</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>        movep y:input,x: (r0)              ;input sample in memory</Normal Text><br/>
<Normal Text>        clr   a                x:(r0)+,x0  y: (r4)+,y0</Normal Text><br/>
<Normal Text>        rep   #n-1</Normal Text><br/>
<Normal Text>        mac   x0,y0,a          x:(r0)+,x0  y:(r4)+,y0</Normal Text><br/>
<Normal Text>        macr  x0,x0,a          (r0)-</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>        movep a,y:output                   ;output ﬁltered sample</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>fftr2a macro points,data,coef</Normal Text><br/>
<Normal Text>fftr2a ident 1,1</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>        move #points/2,n0  ;initialize butterﬂies per group</Normal Text><br/>
<Normal Text>        move #1,n2         ;initialize groups per pass</Normal Text><br/>
<Normal Text>        move #points/4,n6  ;initialize C pointer offset</Normal Text><br/>
<Normal Text>        move #-1,m0        ;initialize A and B address modiﬁers</Normal Text><br/>
<Normal Text>        move m0,m1         ;for linear addressing</Normal Text><br/>
<Normal Text>        move m0,m4</Normal Text><br/>
<Normal Text>        move m0,m5</Normal Text><br/>
<Normal Text>        move #0,m6         ;initialize C address modiﬁer for</Normal Text><br/>
<Normal Text>                           ;reverse carry (bit-reversed) addressing</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>        do   #@cvi (@log(points)/@log(2)+0.5),_end_pass</Normal Text><br/>
<Normal Text>        move #data,r0       ;initialize A input pointer</Normal Text><br/>
<Normal Text>        move r0,r4          ;initialize A output pointer</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>_end_bfy</Normal Text><br/>
<Normal Text>        move a,x:(r5)+n5 y:(r1)+n1,y1</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>end_cell</Normal Text><br/>
<Normal Text>        rnd a</Normal Text><br/>
<Normal Text>        movep #0,x:$fffe</Normal Text><br/>
<Normal Text>        dc @sin(@cvf(count)*freq)</Normal Text><br/>
<Normal Text>        move #twiddle,r2</Normal Text><br/>
