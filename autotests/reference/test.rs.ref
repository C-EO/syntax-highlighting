<Comment>// Comment </Comment><Alert Level 3>NOTE</Alert Level 3><br/>
<Comment>/* Comment </Comment><Alert Level 2>FIXME</Alert Level 2><Comment> </Comment><Alert Level 1>ALERT</Alert Level 1><br/>
<Comment>	*/</Comment><br/>
<Normal Text></Normal Text><br/>
<Comment>// Identifiers</Comment><br/>
<Macro>hellóñαωΑΩµo!</Macro><Normal Text>();</Normal Text><br/>
<Scope>HellóñαωΑΩµ::</Scope><Normal Text>Hello;</Normal Text><br/>
<Lifetime>'hellóñαωΑΩµo</Lifetime><br/>
<Normal Text></Normal Text><br/>
<Keyword>pub</Keyword><Normal Text> </Normal Text><Keyword>use</Keyword><Normal Text> </Normal Text><Keyword>self</Keyword><Normal Text>::</Normal Text><Scope>PathParameters::</Scope><Normal Text>*;</Normal Text><br/>
<Keyword>pub</Keyword><Normal Text> </Normal Text><Keyword>use</Keyword><Normal Text> </Normal Text><Scope>symbol::</Scope><Symbol>{</Symbol><Normal Text>Ident, Symbol </Normal Text><Keyword>as</Keyword><Normal Text> Name</Normal Text><Symbol>}</Symbol><Normal Text>;</Normal Text><br/>
<Keyword>use</Keyword><Normal Text> </Normal Text><Scope>serialize::</Scope><Symbol>{</Symbol><Keyword>self</Keyword><Normal Text>, Encoder, Decoder</Normal Text><Symbol>}</Symbol><Normal Text>;</Normal Text><br/>
<Keyword>use</Keyword><Normal Text> </Normal Text><Scope>std::</Scope><Type>u32</Type><Normal Text>;</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Attribute>#[derive(</Attribute><Trait>Clone</Trait><Attribute>, </Attribute><Trait>PartialEq</Trait><Attribute>, </Attribute><Trait>Eq</Trait><Attribute>, </Attribute><Trait>RustcEncodable</Trait><Attribute>, </Attribute><Trait>RustcDecodable</Trait><Attribute>, </Attribute><Trait>Hash</Trait><Attribute>, </Attribute><Trait>Copy</Trait><Attribute>)]</Attribute><br/>
<Normal Text></Normal Text><br/>
<Keyword>pub</Keyword><Normal Text> </Normal Text><Keyword>struct</Keyword><Normal Text> Lifetime </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>	</Normal Text><Keyword>pub</Keyword><Normal Text> id: NodeId,</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>pub</Keyword><Normal Text> span: Span,</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>pub</Keyword><Normal Text> bounds: </Normal Text><Type>Vec</Type><Normal Text><PathSegment></Normal Text><br/>
<Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Keyword>impl</Keyword><Normal Text> </Normal Text><Scope>fmt::</Scope><Trait>Debug</Trait><Normal Text> </Normal Text><Keyword>for</Keyword><Normal Text> Lifetime </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>	</Normal Text><Keyword>fn</Keyword><Definition> fmt</Definition><Normal Text>(&</Normal Text><Keyword>self</Keyword><Normal Text>, f: &</Normal Text><Keyword>mut</Keyword><Normal Text> </Normal Text><Scope>fmt::</Scope><Normal Text>Formatter) -> </Normal Text><Scope>fmt::</Scope><Type>Result</Type><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>		</Normal Text><Macro>write!</Macro><Normal Text>(f, </Normal Text><String>"lifetime({}: {})"</String><Normal Text>, </Normal Text><Keyword>self</Keyword><Normal Text>.id, </Normal Text><Scope>pprust::</Scope><Normal Text>lifetime_to_string(</Normal Text><Keyword>self</Keyword><Normal Text>))</Normal Text><br/>
<Normal Text>	</Normal Text><Symbol>}</Symbol><br/>
<Symbol>}</Symbol><br/>
<Keyword>impl</Keyword><Normal Text><</Normal Text><Lifetime>'a</Lifetime><Normal Text>> </Normal Text><Trait>PartialEq</Trait><Normal Text><&</Normal Text><Lifetime>'a</Lifetime><Normal Text> </Normal Text><Type>str</Type><Normal Text>> </Normal Text><Keyword>for</Keyword><Normal Text> </Normal Text><Type>Path</Type><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>	</Normal Text><Keyword>fn</Keyword><Definition> eq</Definition><Normal Text>(&</Normal Text><Keyword>self</Keyword><Normal Text>, string: &&</Normal Text><Lifetime>'a</Lifetime><Normal Text> </Normal Text><Type>str</Type><Normal Text>) -> </Normal Text><Type>bool</Type><Normal Text> </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>		</Normal Text><Keyword>self</Keyword><Normal Text>.segments.len() == </Normal Text><Number>1</Number><Normal Text> && </Normal Text><Keyword>self</Keyword><Normal Text>.segments</Normal Text><Symbol>[</Symbol><Number>0</Number><Symbol>]</Symbol><Normal Text>.identifier.name == *string</Normal Text><br/>
<Normal Text>	</Normal Text><Symbol>}</Symbol><br/>
<Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Keyword>enum</Keyword><Normal Text> TraitBoundModifier </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>	</Normal Text><Constant>None</Constant><Normal Text>,</Normal Text><br/>
<Normal Text>	Maybe,</Normal Text><br/>
<Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Keyword>union</Keyword><Normal Text> tests </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>	a: </Normal Text><Type>i128</Type><Normal Text>,</Normal Text><br/>
<Normal Text>	b: </Normal Text><Type>isize</Type><Normal Text>,</Normal Text><br/>
<Symbol>}</Symbol><br/>
<Normal Text></Normal Text><br/>
<Attribute>#[valid types]</Attribute><br/>
<Keyword>fn</Keyword><Definition> types</Definition><Normal Text>() </Normal Text><Symbol>{</Symbol><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> num = </Normal Text><Number>333_3_</Number><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> num_u8: </Normal Text><Type>u8</Type><Normal Text> = </Normal Text><Number>333u8</Number><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> num_u16: </Normal Text><Type>u16</Type><Normal Text> = </Normal Text><Number>333u16</Number><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> num_u32: </Normal Text><Type>u32</Type><Normal Text> = </Normal Text><Number>333u32</Number><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> num_u64: </Normal Text><Type>u64</Type><Normal Text> = </Normal Text><Number>333u64</Number><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> num_u128: </Normal Text><Type>u128</Type><Normal Text> = </Normal Text><Number>333u128</Number><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> num_usize: </Normal Text><Type>usize</Type><Normal Text> = </Normal Text><Number>333usize</Number><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> num_float: </Normal Text><Type>f32</Type><Normal Text> = </Normal Text><Number>333.45f32</Number><Normal Text>;</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> binary = </Normal Text><Number>0b1_010</Number><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_binary= </Normal Text><Error>0b1_015</Error><Normal Text>;</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> octal = </Normal Text><Number>0o21535</Number><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_octal = </Normal Text><Error>0o64_92</Error><Normal Text>;</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> hexadecimal = </Normal Text><Number>0x73A2_F</Number><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_hexadecimal = </Normal Text><Error>0x7_3AY</Error><Normal Text>;</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> char1: </Normal Text><Type>char</Type><Normal Text> = </Normal Text><Character>'a'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> char2: </Normal Text><Type>char</Type><Normal Text> = </Normal Text><Character>'</Character><CharEscape>\n</CharEscape><Character>'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> char3: </Normal Text><Type>char</Type><Normal Text> = </Normal Text><Character>'</Character><CharEscape>\u{123_AF}</CharEscape><Character>'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_char1: </Normal Text><Type>char</Type><Normal Text> = </Normal Text><Character>'</Character><Error>\y</Error><Character>'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_char2: </Normal Text><Type>char</Type><Normal Text> = </Normal Text><Character>'</Character><Error>\324</Error><Character>'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_char3: </Normal Text><Type>char</Type><Normal Text> = </Normal Text><Character>'</Character><Error>%%</Error><Character>'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_char4: </Normal Text><Type>char</Type><Normal Text> = </Normal Text><Character>'</Character><Error>\n\dfd</Error><Character>'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_char5: </Normal Text><Type>char</Type><Normal Text> = </Normal Text><Lifetime>'aaaa</Lifetime><Normal Text>a</Normal Text><Character>'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> open_char: </Normal Text><Type>char</Type><Normal Text> = </Normal Text><Character>'</Character><Normal Text>&&&;</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> byte1: </Normal Text><Type>u8</Type><Normal Text> = </Normal Text><Character>b'a'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> byte2: </Normal Text><Type>u8</Type><Normal Text> = </Normal Text><Character>b'</Character><CharEscape>\x13</CharEscape><Character>'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_byte1: </Normal Text><Type>u8</Type><Normal Text> = b</Normal Text><Lifetime>'a</Lifetime><Normal Text>b</Normal Text><Character>'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_byte2: </Normal Text><Type>u8</Type><Normal Text> = b</Normal Text><Character>'</Character><Error>\b</Error><Character>'</Character><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_byte2: </Normal Text><Type>u8</Type><Normal Text> = b</Normal Text><Character>'</Character><CharEscape>\u{123}</CharEscape><Character>'</Character><Normal Text>;</Normal Text><br/>
<Normal Text></Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> string: </Normal Text><Type>str</Type><Normal Text> = </Normal Text><String>"hello </String><CharEscape>\n</CharEscape><String> </String><CharEscape>\r</CharEscape><String> </String><CharEscape>\u{123_________fd_}</CharEscape><String> </String><CharEscape>\</CharEscape><br/>
<String>						bye"</String><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> invalid_string: </Normal Text><Type>str</Type><Normal Text> = </Normal Text><String>"hello </String><CharEscape>\</CharEscape><Error>b</Error><String> </String><CharEscape>\</CharEscape><Error>u</Error><String>{_123} </String><CharEscape>\</CharEscape><Error>u</Error><String>{1234567} </String><CharEscape>\</CharEscape><Error> </Error><String> bye"</String><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> byte_string: </Normal Text><Type>str</Type><Normal Text> = </Normal Text><String>b"hello </String><CharEscape>\t</CharEscape><String> </String><CharEscape>\0</CharEscape><String> </String><CharEscape>\</CharEscape><Error>u</Error><String>{123} </String><CharEscape>\</CharEscape><Error>b</Error><String> bye"</String><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> raw_string1: </Normal Text><Type>str</Type><Normal Text> = </Normal Text><String>r"hello \t \b"</String><Normal Text>;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> raw_string2: </Normal Text><Type>str</Type><Normal Text> = </Normal Text><String>r####"hello \n "### bye"####</String><Normal Text>####;</Normal Text><br/>
<Normal Text>	</Normal Text><Keyword>let</Keyword><Normal Text> raw_string3: </Normal Text><Type>str</Type><Normal Text> = </Normal Text><String>br####"hello \n"####</String><Normal Text>;</Normal Text><br/>
<Symbol>}</Symbol><br/>
