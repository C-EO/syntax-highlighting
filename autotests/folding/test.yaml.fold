# YAML test

# Comment

key: value
another key: Another value
boolean: true
null_value: null
single quotes: <beginfold id='3'>'</beginfold id='3'>have ''one'' escape pattern<endfold id='3'>'</endfold id='3'>
double quotes: <beginfold id='3'>"</beginfold id='3'>have many: \", \0, \t, \u263A, \x0d\x0a == \r\n, and more.<endfold id='3'>"</endfold id='3'>

decimal: +12345
negative: -1_4
zero: 0
octal: 0o14
another octal: 014_2
hexadecimal: 0x_Ca2
float: 1.23015e+3
exponential: 12.3015e+02
fixed: 12__30.1_5
sexagesimal: 19_0:20:30.15
sexagesimal-inline: <beginfold id='1'>[</beginfold id='1'>123:45:12, 123:45:32.234_32, +12__3:23<endfold id='1'>]</endfold id='1'>
infinity: !!float .inf
not a number: !!float .NaN
datetime: 2001-12-15T02:59:43.1Z
date: 2002-12-14

json_map: <beginfold id='2'>{</beginfold id='2'>"key": <beginfold id='3'>"</beginfold id='3'>value<endfold id='3'>"</endfold id='3'><endfold id='2'>}</endfold id='2'>
json_seq: <beginfold id='1'>[</beginfold id='1'>3, 2, -.inf, <beginfold id='3'>"</beginfold id='3'>value<endfold id='3'>"</endfold id='3'><endfold id='1'>]</endfold id='1'>
another key: <beginfold id='2'>{</beginfold id='2'>key: <beginfold id='1'>[</beginfold id='1'>+0x12a, , !!hello: bye, 1, off, <beginfold id='2'>{</beginfold id='2'>a: <beginfold id='1'>[</beginfold id='1'><beginfold id='2'>{</beginfold id='2'>b: <beginfold id='3'>'</beginfold id='3'><endfold id='3'>'</endfold id='3'><endfold id='2'>}</endfold id='2'><endfold id='1'>]</endfold id='1'><endfold id='2'>}</endfold id='2'><endfold id='1'>]</endfold id='1'><endfold id='2'>}</endfold id='2'>

? !!python/tuple <beginfold id='1'>[</beginfold id='1'>5, 7<endfold id='1'>]</endfold id='1'>
: Fifty Seven

? set2:
  item1: null
  item2: null

foo: &foo
  <<: *base
  age: 10

!!seq <beginfold id='1'>[</beginfold id='1'>
  !!str <beginfold id='3'>"</beginfold id='3'>Block scalar\n<endfold id='3'>"</endfold id='3'>,
  !!map <beginfold id='2'>{</beginfold id='2'>
    ? &B1 !!str <beginfold id='3'>"</beginfold id='3'>foo<endfold id='3'>"</endfold id='3'>
    : !!str <beginfold id='3'>"</beginfold id='3'>bar<endfold id='3'>"</endfold id='3'>,
    ? !!str <beginfold id='3'>"</beginfold id='3'>baz<endfold id='3'>"</endfold id='3'>
    : *B1,
  <endfold id='2'>}</endfold id='2'>,
  !!map <beginfold id='2'>{</beginfold id='2'>
     !!str "sun" : !!str <beginfold id='3'>"</beginfold id='3'>yellow<endfold id='3'>"</endfold id='3'>,
  <endfold id='2'>}</endfold id='2'>,
<endfold id='1'>]</endfold id='1'>

!!map <beginfold id='2'>{</beginfold id='2'>
  !!str "Booleans": !!seq <beginfold id='1'>[</beginfold id='1'>
    !!bool <beginfold id='3'>"</beginfold id='3'>true<endfold id='3'>"</endfold id='3'>, !!bool <beginfold id='3'>"</beginfold id='3'>false<endfold id='3'>"</endfold id='3'>
  <endfold id='1'>]</endfold id='1'>,
  !!str "Invalid": !!seq <beginfold id='1'>[</beginfold id='1'>
    # Rejected by the schema
    True, Null, 0o7, 0x3A, +12.3,
  <endfold id='1'>]</endfold id='1'>,
<endfold id='2'>}</endfold id='2'>

--- !clarkevans.com,2002/graph/^shape
- !^circle
  center: &ORIGIN <beginfold id='2'>{</beginfold id='2'>x: 73, y: 129<endfold id='2'>}</endfold id='2'>
  radius: 7

? - Dog
  - Cat
: <beginfold id='1'>[</beginfold id='1'> 2018-08-11, 2016-01-01 <endfold id='1'>]</endfold id='1'>

# Literal/Folded Style

--- <beginfold id='4'>|</beginfold id='4'>
  \//||\/||
  // ||  ||__

<endfold id='4'>-</endfold id='4'>-- <beginfold id='4'>></beginfold id='4'>
  Mark McGwire's
  year was crippled
  by a knee injury.
 
<endfold id='4'>?</endfold id='4'> <beginfold id='4'>|</beginfold id='4'>
  This is a key
  that has multiple lines
<endfold id='4'>:</endfold id='4'> <beginfold id='4'>|</beginfold id='4'>
  and this is it's literal value

<endfold id='4'>#</endfold id='4'> Capture the indentation of the Key. The "-" and "?" operators
# are considered as part of the indentation:
key1:
   key2: !!hello <beginfold id='4'>|</beginfold id='4'>
    literal: " text" # [ ]

    # literal { }
<endfold id='4'>   k</endfold id='4'>ey3: <beginfold id='4'>|+</beginfold id='4'>
    literal: 'text'
<endfold id='4'>   n</endfold id='4'>o-literal: <beginfold id='3'>"</beginfold id='3'> text<endfold id='3'>"</endfold id='3'>
    #comment

?  key: <beginfold id='4'>|-</beginfold id='4'>
    literal: "text"
<endfold id='4'>   n</endfold id='4'>o-literal: <beginfold id='3'>"</beginfold id='3'>text<endfold id='3'>"</endfold id='3'>
- item1
    - item2
        - - - key: <beginfold id='4'>>-</beginfold id='4'>
               "literal text" # [ ]

               'literal block'
<endfold id='4'>              n</endfold id='4'>o-literal: 12

? - - - - ? key: <beginfold id='4'>|</beginfold id='4'>
             literal: [ ]
<endfold id='4'>            n</endfold id='4'>o-literal: <beginfold id='1'>[</beginfold id='1'> <endfold id='1'>]</endfold id='1'>

# Capture the indentation of the literal/folded operator:
<beginfold id='4'>|-</beginfold id='4'>
 literal: "text"

<endfold id='4'>!</endfold id='4'>!binary <beginfold id='4'>|</beginfold id='4'>
 R0lGODlhDAAMAIQAAP//9/X
 17unp5WZmZgAAAOfn515eXv
 Pz7Y6OjuDg4J+fn5OTk6enp
 56enmleECcgggoBADs=

<endfold id='4'>k</endfold id='4'>ey1:
  key2:
<beginfold id='4'>   |</beginfold id='4'>
   literal: "text"
<endfold id='4'>  k</endfold id='4'>ey3:
   !!str <beginfold id='4'>|</beginfold id='4'>
   literal: "text"
   #literal

<endfold id='4'>#</endfold id='4'> Capture the indentation of the operators "-" or "?":
? - - - !!hello <beginfold id='4'>|+</beginfold id='4'>
       literal: "sdfsd" # [ ]
<endfold id='4'>      n</endfold id='4'>o-literal: <beginfold id='3'>"</beginfold id='3'>sdfsd<endfold id='3'>"</endfold id='3'> # [ ]

- - - - <beginfold id='4'>>-</beginfold id='4'>
       literal: "text"
       #literal
<endfold id='4'>      n</endfold id='4'>o-literal: <beginfold id='3'>"</beginfold id='3'>text<endfold id='3'>"</endfold id='3'> 

# This implementation of literal blocks has a limitation:
# it only supports 6 dashes at most.
- - - - - - - key: |
               literal? <beginfold id='3'>"</beginfold id='3'>dfsf<endfold id='3'>"</endfold id='3'>
