/// <reference types="node" />

// TypeScript Test

class Student <beginfold id='1'>{</beginfold id='1'>
    fullName: string;
    constructor(public firstName: string, public middleInitial: string, public lastName: string) <beginfold id='1'>{</beginfold id='1'>
        this.fullName = firstName + " " + middleInitial + " " + lastName;
    <endfold id='1'>}</endfold id='1'>
<endfold id='1'>}</endfold id='1'>

interface Person <beginfold id='1'>{</beginfold id='1'>
    firstName: string;
    lastName: string;
<endfold id='1'>}</endfold id='1'>

function greeter(person : Person) <beginfold id='1'>{</beginfold id='1'>
    return "Hello, " + person.firstName + " " + person.lastName;
<endfold id='1'>}</endfold id='1'>

let user = new Student("Jane", "M.", "User");

document.body.innerHTML = greeter(user);
JSON.stringify()
console.log("Hello world");

import http = require<beginfold id='3'>(</beginfold id='3'>"http"<endfold id='3'>)</endfold id='3'>;
import path = require<beginfold id='3'>(</beginfold id='3'>"path"<endfold id='3'>)</endfold id='3'>;
import URL = url.URL;
import <beginfold id='1'>{</beginfold id='1'> Readable, Writable <endfold id='1'>}</endfold id='1'> from "stream";
import <beginfold id='1'>{</beginfold id='1'> isBuffer, isString, isObject <endfold id='1'>}</endfold id='1'> from "util";

const port = 8__88___8;
const baseUrl = new URL(`http://localhost:${port}/`);
const rootDir = path.dirname(__dirname);

const defaultBrowser = os.platform() === "win32" ? "edge" : "chrome";
let browser: "edge" | "chrome" | "none" = defaultBrowser;
let grep: string | undefined;

interface FileBasedTestConfiguration <beginfold id='1'>{</beginfold id='1'>
    <beginfold id='2'>[</beginfold id='2'>setting: string<endfold id='2'>]</endfold id='2'>: string;
<endfold id='1'>}</endfold id='1'>

function swapCase(s: string): string <beginfold id='1'>{</beginfold id='1'>
    return s.replace(/\w/g, (ch) => <beginfold id='1'>{</beginfold id='1'>
        const up = ch.toUpperCase();
        return ch === up ? ch.toLowerCase() : up;
    <endfold id='1'>}</endfold id='1'>);
<endfold id='1'>}</endfold id='1'>

for (var i in pieces) <beginfold id='1'>{</beginfold id='1'>
    switch (true) <beginfold id='1'>{</beginfold id='1'>
        case /^\"?Accession\"?/.test(pieces<beginfold id='2'>[</beginfold id='2'>i<endfold id='2'>]</endfold id='2'>):
            numeration<beginfold id='2'>[</beginfold id='2'>0<endfold id='2'>]</endfold id='2'> = i;
            break;
    <endfold id='1'>}</endfold id='1'>
<endfold id='1'>}</endfold id='1'>

// Numerics
var a = 0xA;
var b = 0b1;
var c = 0o7;
var d = 1.1E+3;
var e = 1.E+3;
var f = .1E+3;
var g = 1E+3;
var h = 1.1;
var i = 1.;
var j = .1;
var k =  1;
var l = 1__.e+3_22 | .2____e2 | 0o1_23 | 11__. ;

// Types
let a: null = null;
let b: number = 123;
let c: number = 123.456;
let d: string = `Geeks`;
let e: undefined = undefined;
let f: boolean = true;
let g: number = 0b111001; // Binary
let h: number = 0o436; // Octal
let i: number = 0xadf0d; // Hexa-Decimal 

const query = query<<beginfold id='2'>[</beginfold id='2'>number<endfold id='2'>]</endfold id='2'>, number>(`
        SELECT *
        FROM statistics
        WHERE unit_id = $1`)

function runQuery() <beginfold id='1'>{</beginfold id='1'>
    const query = createQuery<<beginfold id='2'>[</beginfold id='2'>number<beginfold id='2'>[</beginfold id='2'><endfold id='2'>]</endfold id='2'><endfold id='2'>]</endfold id='2'>, Table<Columns>>(`
        some SQL here
    `)
    return database.execute(query)
<endfold id='1'>}</endfold id='1'>

aa: <sdf/> string ?<ssd/> string 
 string // Don't highlight
aa: string assa |
   string 
   string ;
   string

aa: <beginfold id='1'>{</beginfold id='1'> string
    string <endfold id='1'>}</endfold id='1'> // Don't highlight
    
aa: <beginfold id='2'>[</beginfold id='2'> string
      string <endfold id='2'>]</endfold id='2'>
aa: ( string 
      string ) // Don't highlight
aa: string <string>
