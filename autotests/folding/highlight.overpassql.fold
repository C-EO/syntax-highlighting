/* Overpass samples taken from
   https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL
   https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_API_by_Example

*/

// single line comment with TODO alerts

/* multi-line comment with ### alerts */

[out:json][timeout:25];
// gather results
<beginfold id='1'>(</beginfold id='1'>
  // query part for: “amenity=post_box”
  node["amenity"="post_box"]<beginfold id='1'>(</beginfold id='1'>52.0, 13.0, 54.0, 13.5<endfold id='1'>)</endfold id='1'>;
  way["amenity"="post_box"]<beginfold id='1'>(</beginfold id='1'>{{bbox}}<endfold id='1'>)</endfold id='1'>;
  relation["amenity"="post_box"]<beginfold id='1'>(</beginfold id='1'>{{bbox}}<endfold id='1'>)</endfold id='1'>;
<endfold id='1'>)</endfold id='1'>;
// print results
out body;
>;
out skel qt;


[out:csv<beginfold id='1'>(</beginfold id='1'>::type, "de:regionalschluessel", name,
         ::count, ::"count:nodes", ::"count:ways", ::"count:relations"<endfold id='1'>)</endfold id='1'>];

//All areas with regional key (German: "Regionalschlüssel") starting with 057
area["de:regionalschluessel"~"^057"];

// Count the pharmacies in each area
foreach->.regio<beginfold id='1'>(</beginfold id='1'>
  // display details for the current area
  .regio out;

  // Collect all Nodes, Ways and Relations with amenity=pharmacy in the current area
  <beginfold id='1'>(</beginfold id='1'> node<beginfold id='1'>(</beginfold id='1'>area.regio<endfold id='1'>)</endfold id='1'>[amenity=pharmacy];
    way<beginfold id='1'>(</beginfold id='1'>area.regio<endfold id='1'>)</endfold id='1'>[amenity=pharmacy];
    rel<beginfold id='1'>(</beginfold id='1'>area.regio<endfold id='1'>)</endfold id='1'>[amenity=pharmacy];<endfold id='1'>)</endfold id='1'>;

// Count the elements in the current area Area
  out count;
<endfold id='1'>)</endfold id='1'>;


[timeout:300]
[bbox:51.08282186160976,-12.8759765625,55.986091533808384,-1.86767578125]
[out:csv<beginfold id='1'>(</beginfold id='1'>::id, ::type, name, "name:en", "name:ga"<endfold id='1'>)</endfold id='1'>];

<beginfold id='1'>(</beginfold id='1'> node[name]["name:en"]["name:ga"]<beginfold id='1'>(</beginfold id='1'>if:<beginfold id='1'>(</beginfold id='1'>t["name"] != t["name:en"]<endfold id='1'>)</endfold id='1'> && <beginfold id='1'>(</beginfold id='1'>t["name"] != t["name:ga"]<endfold id='1'>)</endfold id='1'><endfold id='1'>)</endfold id='1'>;
  way[name]["name:en"]["name:ga"] <beginfold id='1'>(</beginfold id='1'>if:<beginfold id='1'>(</beginfold id='1'>t["name"] != t["name:en"]<endfold id='1'>)</endfold id='1'> && <beginfold id='1'>(</beginfold id='1'>t["name"] != t["name:ga"]<endfold id='1'>)</endfold id='1'><endfold id='1'>)</endfold id='1'>;
  rel[name]["name:en"]["name:ga"] <beginfold id='1'>(</beginfold id='1'>if:<beginfold id='1'>(</beginfold id='1'>t["name"] != t["name:en"]<endfold id='1'>)</endfold id='1'> && <beginfold id='1'>(</beginfold id='1'>t["name"] != t["name:ga"]<endfold id='1'>)</endfold id='1'><endfold id='1'>)</endfold id='1'>;
<endfold id='1'>)</endfold id='1'>;
out;


[out:csv<beginfold id='1'>(</beginfold id='1'>version,timestamp,changeset,count<endfold id='1'>)</endfold id='1'>];
timeline<beginfold id='1'>(</beginfold id='1'>relation,2632934<endfold id='1'>)</endfold id='1'>;
for <beginfold id='1'>(</beginfold id='1'>t["created"]<endfold id='1'>)</endfold id='1'>
{
  retro<beginfold id='1'>(</beginfold id='1'>_.val<endfold id='1'>)</endfold id='1'>
  {
    rel<beginfold id='1'>(</beginfold id='1'>2632934<endfold id='1'>)</endfold id='1'>;
    make stat version=u<beginfold id='1'>(</beginfold id='1'>version<beginfold id='1'>(</beginfold id='1'><endfold id='1'>)</endfold id='1'><endfold id='1'>)</endfold id='1'>,timestamp=u<beginfold id='1'>(</beginfold id='1'>timestamp<beginfold id='1'>(</beginfold id='1'><endfold id='1'>)</endfold id='1'><endfold id='1'>)</endfold id='1'>,changeset=u<beginfold id='1'>(</beginfold id='1'>changeset<beginfold id='1'>(</beginfold id='1'><endfold id='1'>)</endfold id='1'><endfold id='1'>)</endfold id='1'>,count=u<beginfold id='1'>(</beginfold id='1'>count_members<beginfold id='1'>(</beginfold id='1'><endfold id='1'>)</endfold id='1'><endfold id='1'>)</endfold id='1'>;
    out;
  }
}


[timeout:60];
area["name"="Mayenne"]->.boundaryarea;
way<beginfold id='1'>(</beginfold id='1'>area.boundaryarea<endfold id='1'>)</endfold id='1'>["building"="church"];
  foreach<beginfold id='1'>(</beginfold id='1'>
    node<beginfold id='1'>(</beginfold id='1'>w<endfold id='1'>)</endfold id='1'>->.d;                                     // determine all nodes of a way
    .n is_in->.a;
    area.a[name][boundary=administrative][admin_level~"^[2-8]$"] -> .a;
    out center;
    convert way ::=::,
              ::id = id<beginfold id='1'>(</beginfold id='1'><endfold id='1'>)</endfold id='1'>,
              is_in=a.set<beginfold id='1'>(</beginfold id='1'>"{" + t["admin_level"] + ":" + t["name"] + "}"<endfold id='1'>)</endfold id='1'>;

    out;
<endfold id='1'>)</endfold id='1'>;
