//// Syntax test file for Gleam
////
//// This is a dummy example file and should not be taken as a reference of
//// well written Gleam, but it does compile correctly appart from an error
//// for the absent file "./ffi.mjs" and some warnings.
////
//// top module documentation comment

import gleam/bit_array as bit_string
import gleam/bool
import gleam/dict<beginfold id='1'>.{</beginfold id='1'>type Dict, delete, get, insert<endfold id='1'>}</endfold id='1'>
import gleam/io

/// function documentation comment
/// spanning multiple lines
pub fn main<beginfold id='2'>(</beginfold id='2'><endfold id='2'>)</endfold id='2'> <beginfold id='1'>{</beginfold id='1'>
  let assert Ok<beginfold id='2'>(</beginfold id='2'>prefix<endfold id='2'>)</endfold id='2'> = bit_string.to_string<beginfold id='2'>(</beginfold id='2'>prefix<endfold id='2'>)</endfold id='2'>
  let name: String = <beginfold id='3'>"</beginfold id='3'>Kate \u{1F3F3}\u{FE0F}\u{200D}\u{1F308} <endfold id='3'>"</endfold id='3'>
  let assert Ok<beginfold id='2'>(</beginfold id='2'>suffix<endfold id='2'>)</endfold id='2'> = get<beginfold id='2'>(</beginfold id='2'>mascots<beginfold id='2'>(</beginfold id='2'><endfold id='2'>)</endfold id='2'>, <beginfold id='3'>"</beginfold id='3'>Lucy<endfold id='3'>"</endfold id='3'><endfold id='2'>)</endfold id='2'>
  io.println<beginfold id='2'>(</beginfold id='2'>prefix <> name <> suffix<endfold id='2'>)</endfold id='2'>
<endfold id='1'>}</endfold id='1'>

const prefix = <beginfold id='4'><<</beginfold id='4'><beginfold id='3'>"</beginfold id='3'>Hello<endfold id='3'>"</endfold id='3'>:utf8, 44:size<beginfold id='2'>(</beginfold id='2'>8<endfold id='2'>)</endfold id='2'>, 32:int<endfold id='4'>>></endfold id='4'>

fn number<beginfold id='2'>(</beginfold id='2'>int<endfold id='2'>)</endfold id='2'> <beginfold id='1'>{</beginfold id='1'>
  use <- bool.guard<beginfold id='2'>(</beginfold id='2'>when: int < 0, return: False<endfold id='2'>)</endfold id='2'>
  let dec = 123_456_789
  let bin = 0b10011011
  let oct = 0o1234567
  let hex = 0x8337_BEEF
  let _float = -3.1415 *. 1.0e-4
  let roof = <beginfold id='1'>{</beginfold id='1'> <beginfold id='1'>{</beginfold id='1'> dec + oct <endfold id='1'>}</endfold id='1'> * bin - hex <endfold id='1'>}</endfold id='1'> / 4
  // 4_246_851_061
  case int <beginfold id='1'>{</beginfold id='1'>
    _ if int < roof -> True
    _ -> False
  <endfold id='1'>}</endfold id='1'>
<endfold id='1'>}</endfold id='1'>

pub opaque type CustomType<beginfold id='2'>(</beginfold id='2'>a<endfold id='2'>)</endfold id='2'> <beginfold id='1'>{</beginfold id='1'>
  Var1<beginfold id='2'>(</beginfold id='2'>x: a<endfold id='2'>)</endfold id='2'>
  Var2<beginfold id='2'>(</beginfold id='2'>x: a, y: a<endfold id='2'>)</endfold id='2'>
  Var3<beginfold id='2'>(</beginfold id='2'>x: a, y: a, z: a<endfold id='2'>)</endfold id='2'>
<endfold id='1'>}</endfold id='1'>

pub fn first<beginfold id='2'>(</beginfold id='2'>ct: CustomType<beginfold id='2'>(</beginfold id='2'>a<endfold id='2'>)</endfold id='2'><endfold id='2'>)</endfold id='2'> -> a <beginfold id='1'>{</beginfold id='1'>
  ct.x
<endfold id='1'>}</endfold id='1'>

@deprecated<beginfold id='2'>(</beginfold id='2'><beginfold id='3'>"</beginfold id='3'>Use last instead<endfold id='3'>"</endfold id='3'><endfold id='2'>)</endfold id='2'>
pub fn third<beginfold id='2'>(</beginfold id='2'>ct: CustomType<beginfold id='2'>(</beginfold id='2'>a<endfold id='2'>)</endfold id='2'><endfold id='2'>)</endfold id='2'> -> a <beginfold id='1'>{</beginfold id='1'>
  // let assert Var3(_, _, z) = ct  z
  case ct <beginfold id='1'>{</beginfold id='1'>
    Var3<beginfold id='2'>(</beginfold id='2'>_, _, z<endfold id='2'>)</endfold id='2'> -> z
    _ -> panic
  <endfold id='1'>}</endfold id='1'>
<endfold id='1'>}</endfold id='1'>

pub fn last<beginfold id='2'>(</beginfold id='2'>ct: CustomType<beginfold id='2'>(</beginfold id='2'>a<endfold id='2'>)</endfold id='2'><endfold id='2'>)</endfold id='2'> -> a <beginfold id='1'>{</beginfold id='1'>
  case ct <beginfold id='1'>{</beginfold id='1'>
    Var1<beginfold id='2'>(</beginfold id='2'>x<endfold id='2'>)</endfold id='2'> -> x
    Var2<beginfold id='2'>(</beginfold id='2'>_, y<endfold id='2'>)</endfold id='2'> -> y
    Var3<beginfold id='2'>(</beginfold id='2'>_, _, z<endfold id='2'>)</endfold id='2'> -> z
  <endfold id='1'>}</endfold id='1'>
<endfold id='1'>}</endfold id='1'>

pub type ListError <beginfold id='1'>{</beginfold id='1'>
  EmptyList
  ListTooLong
<endfold id='1'>}</endfold id='1'>

pub fn from_list<beginfold id='2'>(</beginfold id='2'>l: List<beginfold id='2'>(</beginfold id='2'>a<endfold id='2'>)</endfold id='2'><endfold id='2'>)</endfold id='2'> -> Result<beginfold id='2'>(</beginfold id='2'>CustomType<beginfold id='2'>(</beginfold id='2'>a<endfold id='2'>)</endfold id='2'>, ListError<endfold id='2'>)</endfold id='2'> <beginfold id='1'>{</beginfold id='1'>
  case l <beginfold id='1'>{</beginfold id='1'>
    <beginfold id='5'>[</beginfold id='5'>x<endfold id='5'>]</endfold id='5'> -> Ok<beginfold id='2'>(</beginfold id='2'>Var1<beginfold id='2'>(</beginfold id='2'>x<endfold id='2'>)</endfold id='2'><endfold id='2'>)</endfold id='2'>
    <beginfold id='5'>[</beginfold id='5'>x, y<endfold id='5'>]</endfold id='5'> -> Ok<beginfold id='2'>(</beginfold id='2'>Var2<beginfold id='2'>(</beginfold id='2'>x, y<endfold id='2'>)</endfold id='2'><endfold id='2'>)</endfold id='2'>
    <beginfold id='5'>[</beginfold id='5'>x, y, z<endfold id='5'>]</endfold id='5'> -> Ok<beginfold id='2'>(</beginfold id='2'>Var3<beginfold id='2'>(</beginfold id='2'>x, y, z<endfold id='2'>)</endfold id='2'><endfold id='2'>)</endfold id='2'>
    <beginfold id='5'>[</beginfold id='5'><endfold id='5'>]</endfold id='5'> -> Error<beginfold id='2'>(</beginfold id='2'>EmptyList<endfold id='2'>)</endfold id='2'>
    _ -> Error<beginfold id='2'>(</beginfold id='2'>ListTooLong<endfold id='2'>)</endfold id='2'>
  <endfold id='1'>}</endfold id='1'>
<endfold id='1'>}</endfold id='1'>

fn mascots<beginfold id='2'>(</beginfold id='2'><endfold id='2'>)</endfold id='2'> -> Dict<beginfold id='2'>(</beginfold id='2'>String, String<endfold id='2'>)</endfold id='2'> <beginfold id='1'>{</beginfold id='1'>
  let old_mascots = dict.from_list<beginfold id='2'>(</beginfold id='2'><beginfold id='5'>[</beginfold id='5'>#<beginfold id='2'>(</beginfold id='2'><beginfold id='3'>"</beginfold id='3'>Konqi<endfold id='3'>"</endfold id='3'>, <beginfold id='3'>"</beginfold id='3'>üêâ<endfold id='3'>"</endfold id='3'><endfold id='2'>)</endfold id='2'>, #<beginfold id='2'>(</beginfold id='2'><beginfold id='3'>"</beginfold id='3'>Kandalf<endfold id='3'>"</endfold id='3'>, <beginfold id='3'>"</beginfold id='3'>üßô<endfold id='3'>"</endfold id='3'><endfold id='2'>)</endfold id='2'><endfold id='5'>]</endfold id='5'><endfold id='2'>)</endfold id='2'>
  let new_mascots =
    old_mascots
    |> delete<beginfold id='2'>(</beginfold id='2'><beginfold id='3'>"</beginfold id='3'>Kandalf<endfold id='3'>"</endfold id='3'><endfold id='2'>)</endfold id='2'>
    |> insert<beginfold id='2'>(</beginfold id='2'><beginfold id='3'>"</beginfold id='3'>Kate<endfold id='3'>"</endfold id='3'>, <beginfold id='3'>"</beginfold id='3'>üê¶<endfold id='3'>"</endfold id='3'><endfold id='2'>)</endfold id='2'>
    |> insert<beginfold id='2'>(</beginfold id='2'><beginfold id='3'>"</beginfold id='3'>Katie<endfold id='3'>"</endfold id='3'>, <beginfold id='3'>"</beginfold id='3'>üêâ<endfold id='3'>"</endfold id='3'><endfold id='2'>)</endfold id='2'>
    |> insert<beginfold id='2'>(</beginfold id='2'><beginfold id='3'>"</beginfold id='3'>Lucy<endfold id='3'>"</endfold id='3'>, <beginfold id='3'>"</beginfold id='3'>üåü<endfold id='3'>"</endfold id='3'><endfold id='2'>)</endfold id='2'>
  new_mascots
<endfold id='1'>}</endfold id='1'>

type UserId =
  Int

@external<beginfold id='2'>(</beginfold id='2'>javascript, <beginfold id='3'>"</beginfold id='3'>./ffi.mjs<endfold id='3'>"</endfold id='3'>, <beginfold id='3'>"</beginfold id='3'>ext<endfold id='3'>"</endfold id='3'><endfold id='2'>)</endfold id='2'>
fn ext<beginfold id='2'>(</beginfold id='2'>id: UserId<endfold id='2'>)</endfold id='2'> -> String <beginfold id='1'>{</beginfold id='1'>
  todo as <beginfold id='3'>"</beginfold id='3'>fun not implemented for this target<endfold id='3'>"</endfold id='3'>
<endfold id='1'>}</endfold id='1'>
