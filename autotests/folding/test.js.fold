#! shebang
#! no-shebang

<beginfold id='5'>/*</beginfold id='5'> comment <endfold id='5'>*/</endfold id='5'>

function fun()
<beginfold id='1'>{</beginfold id='1'>
    var boo = <beginfold id='1'>{</beginfold id='1'> 'key': <beginfold id='2'>[</beginfold id='2'> 1, 2.0, 3.0e1, 004, 0x5 <endfold id='2'>]</endfold id='2'> <endfold id='1'>}</endfold id='1'>;
<endfold id='1'>}</endfold id='1'>

class MyClass; // reserved keywords

// Member objects: text after "."
object.property instanceof Number;
iden1.iden2  . iden3.class class;

var escapes = "aa\b\n\0a\"a\x12a\32a\u{123}a\$\%\ \#\y\aaa\
aaa";
var octal = 0o124;
var bin = 0b1010;

日本語().ლಠ益ಠლ.ñá = 42;
δ /No-Regex/

// Only highlight valid regular expressions, of a single line, after strings
// See: https://github.com/microsoft/TypeScript-TmLanguage/issues/786
"text" /No-Regex
"text" /Regex[:)]*/;
const a = "6" / 2; <beginfold id='5'>/*</beginfold id='5'>comment<endfold id='5'>*/</endfold id='5'> const b = 5;
console.log("4" / "2"); // 2
// Single quote
const a = '6' / 2; <beginfold id='5'>/*</beginfold id='5'>comment<endfold id='5'>*/</endfold id='5'> const b = 5;
console.log('4' / '2'); // 2
// Template
const a = <beginfold id='3'>`</beginfold id='3'>6<endfold id='3'>`</endfold id='3'> / 2; <beginfold id='5'>/*</beginfold id='5'>comment<endfold id='5'>*/</endfold id='5'> const b = 5;
console.log(<beginfold id='3'>`</beginfold id='3'>4<endfold id='3'>`</endfold id='3'> / <beginfold id='3'>`</beginfold id='3'>2<endfold id='3'>`</endfold id='3'>); // 2

// Built-in
const os = require('os');
JSON.stringify("hello");
console.error("hello");
Math.LOG10E;
Number.MAX_SAFE_INTEGER;
String.raw<beginfold id='3'>`</beginfold id='3'>raw text \.\n${}<endfold id='3'>`</endfold id='3'>

// Tagged template literals
tagFunc<beginfold id='3'>`</beginfold id='3'>
    Hello world!
    ${ alert("Hello!"); }<endfold id='3'>`</endfold id='3'>;
obj.something.tagFunc<beginfold id='3'>`</beginfold id='3'>Setting ${setting} is ${value + 5}!<endfold id='3'>`</endfold id='3'>;
