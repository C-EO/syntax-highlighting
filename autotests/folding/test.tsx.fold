// TypeScript React

<beginfold id='16'>/** </beginfold id='16'>@author Willy <willy@wmail.com>
  * @url https://reactjs.org/ *<endfold id='16'>*/</endfold id='16'>

import React from 'react';
import <beginfold id='2'>{</beginfold id='2'> PhotoStory, VideoStory <endfold id='2'>}</endfold id='2'> from './stories';

function Story(props) <beginfold id='2'>{</beginfold id='2'>
  const SpecificStory = components<beginfold id='3'>[</beginfold id='3'>props.storyType<endfold id='3'>]</endfold id='3'>;
  return <beginfold id='5'><SpecificStory</beginfold id='5'> story=<beginfold id='6'>{</beginfold id='6'> props.story <endfold id='6'>}</endfold id='6'> attr2="&ref;" attr3="Hello\n" <endfold id='5'>/></endfold id='5'>;
<endfold id='2'>}</endfold id='2'>

function
<beginfold id='5'><Tag</beginfold id='5'> attr1=<beginfold id='6'>{</beginfold id='6'> <beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'> function <noTag/> return class var 0x123 <beginfold id='2'>{</beginfold id='2'> <endfold id='2'>}</endfold id='2'> &noRef; hello() React.Component() <endfold id='6'>}</endfold id='6'> attr2="&ref;">
	/* no comment*/ function <beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'> return class var 0x123 &ref; hello() React.Component()
	.<beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'> anyWord <beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'>
	<beginfold id='6'>{</beginfold id='6'> function <tag> return class var 0x123 hello() React.Component() <endfold id='6'>}</endfold id='6'>
</Tag<endfold id='5'>></endfold id='5'>

<beginfold id='4'><tag1</beginfold id='4'>> </tag1<endfold id='4'>></endfold id='4'>
<beginfold id='4'><tag1</beginfold id='4'>> </Tag$<endfold id='4'>></endfold id='4'>
<beginfold id='5'><Tag$</beginfold id='5'>> </tag<endfold id='5'>></endfold id='5'>

<beginfold id='4'><tag</beginfold id='4'><beginfold id='15'>/*</beginfold id='15'>comment<endfold id='15'>*/</endfold id='15'>attr1<beginfold id='15'>/*</beginfold id='15'>comment<endfold id='15'>*/</endfold id='15'>= <beginfold id='15'>/*</beginfold id='15'>comment<endfold id='15'>*/</endfold id='15'>"value"<beginfold id='15'>/*</beginfold id='15'>comment<endfold id='15'>*/</endfold id='15'>attr2 <beginfold id='15'>/*</beginfold id='15'>comment<endfold id='15'>*/</endfold id='15'>attr3='a' key<beginfold id='15'>/*</beginfold id='15'>comment<endfold id='15'>*/</endfold id='15'>key2 <endfold id='4'>/></endfold id='4'>

// Detect Valid tags

<beginfold id='15'>/*</beginfold id='15'> comment <endfold id='15'>*/</endfold id='15'> <beginfold id='4'><tag</beginfold id='4'>></tag<endfold id='4'>></endfold id='4'>
<beginfold id='2'>{ </beginfold id='2'><beginfold id='15'>/*</beginfold id='15'> comment
	<endfold id='15'>*/</endfold id='15'> <beginfold id='5'><Tag</beginfold id='5'> <endfold id='5'>/></endfold id='5'>
	word <noTag/> . <noTag/> <endfold id='2'>}</endfold id='2'> <noTag/>
return <beginfold id='15'>/*</beginfold id='15'> comment
	multiline <endfold id='15'>*/</endfold id='15'> <beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'> <beginfold id='15'>/*</beginfold id='15'> comment <endfold id='15'>*/</endfold id='15'> <beginfold id='5'><Tag</beginfold id='5'><endfold id='5'>/></endfold id='5'>
&& <beginfold id='15'>/*</beginfold id='15'>comment<endfold id='15'>*/</endfold id='15'> <beginfold id='5'><Tag</beginfold id='5'><endfold id='5'>/></endfold id='5'>
& <beginfold id='15'>/*</beginfold id='15'>comment<endfold id='15'>*/</endfold id='15'> <noTag/>

  <beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'>
<beginfold id='2'>{ </beginfold id='2'><beginfold id='4'><hello</beginfold id='4'>>Hello</hello<endfold id='4'>></endfold id='4'> <endfold id='2'>}</endfold id='2'>
?<beginfold id='5'><Tag</beginfold id='5'> <endfold id='5'>/></endfold id='5'>;
<beginfold id='3'>[ </beginfold id='3'><beginfold id='4'><tag</beginfold id='4'> <endfold id='4'>/></endfold id='4'>  ( <beginfold id='4'><tag</beginfold id='4'> <endfold id='4'>/></endfold id='4'>
,<beginfold id='5'><Tag</beginfold id='5'><endfold id='5'>/></endfold id='5'>    =<beginfold id='5'><Tag</beginfold id='5'><endfold id='5'>/></endfold id='5'>
&&<beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'>   ||<beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'>
return <beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'> ;
default<beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'> ;
<beginfold id='5'><Tag</beginfold id='5'>> <beginfold id='4'><tag</beginfold id='4'>> <beginfold id='5'><tag$</beginfold id='5'><endfold id='5'>/></endfold id='5'> </tag<endfold id='4'>></endfold id='4'> return </Tag<endfold id='5'>></endfold id='5'>

anyWord<noTag>
anyWord<beginfold id='15'>/*</beginfold id='15'>comment<endfold id='15'>*/</endfold id='15'> <noTag/>
.<noTag>
&<notag> | <noTag/>
% <beginfold id='15'>/*</beginfold id='15'> comment<endfold id='15'>*/</endfold id='15'> <noTag/>

// TODO: Fix this (comment before the tag name):
var x = <<beginfold id='15'>/*</beginfold id='15'><endfold id='15'>*/</endfold id='15'>div></div>;

// Tag after ":"
annotation: <beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'>
annotation: text <beginfold id='3'>[</beginfold id='3'> <beginfold id='4'><tag</beginfold id='4'><endfold id='4'>/></endfold id='4'> <endfold id='3'>]</endfold id='3'>
console.log("hello")

// Type assertion in tag
<beginfold id='5'><C</beginfold id='5'><number><endfold id='5'>/></endfold id='5'>
<beginfold id='5'><C</beginfold id='5'><number>> </C<endfold id='5'>></endfold id='5'>
<beginfold id='5'><C</beginfold id='5'>
<error <endfold id='5'>/></endfold id='5'>

// Non-ASCII tag name & attribute
<beginfold id='5'><日本語</beginfold id='5'>></日本語<endfold id='5'>></endfold id='5'>;
<beginfold id='5'><Component</beginfold id='5'> 本本:本-本 aa本:本 aa:aa <endfold id='5'>/></endfold id='5'>
<beginfold id='5'><aaaa:ñ</beginfold id='5'> <endfold id='5'>/></endfold id='5'>

<beginfold id='5'><Namespace.DeepNamespace.Component</beginfold id='5'> <endfold id='5'>/></endfold id='5'>;
<beginfold id='5'><Component</beginfold id='5'> <beginfold id='6'>{</beginfold id='6'> ... x <endfold id='6'>}</endfold id='6'> y
=<beginfold id='6'>{</beginfold id='6'>2 <endfold id='6'>}</endfold id='6'> z <endfold id='5'>/></endfold id='5'>;

let k1 =
    <beginfold id='5'><Comp</beginfold id='5'> a=<beginfold id='6'>{</beginfold id='6'>10<endfold id='6'>}</endfold id='6'> b="hi" <beginfold id='6'>{</beginfold id='6'>...o<endfold id='6'>}</endfold id='6'> >
        hi hi hi!
    </Comp<endfold id='5'>></endfold id='5'>;

let k2 =
    <beginfold id='5'><Comp</beginfold id='5'> a=<beginfold id='6'>{</beginfold id='6'>10<endfold id='6'>}</endfold id='6'> b="hi">
        <beginfold id='4'><div</beginfold id='4'>> My Div </div<endfold id='4'>></endfold id='4'>
        <beginfold id='6'>{</beginfold id='6'>(name: string) => <beginfold id='4'><div</beginfold id='4'>> My name <beginfold id='6'>{</beginfold id='6'>name<endfold id='6'>}</endfold id='6'> </div<endfold id='4'>></endfold id='4'><endfold id='6'>}</endfold id='6'>
    </Comp<endfold id='5'>></endfold id='5'>;

let k3 = <beginfold id='5'><GenericComponent</beginfold id='5'> initialValues=<beginfold id='6'>{</beginfold id='6'><beginfold id='2'>{</beginfold id='2'> x: "y" <endfold id='2'>}</endfold id='2'><endfold id='6'>}</endfold id='6'> nextValues=<beginfold id='6'>{</beginfold id='6'>a => (<beginfold id='2'>{</beginfold id='2'> x: a.x <endfold id='2'>}</endfold id='2'>)<endfold id='6'>}</endfold id='6'> <endfold id='5'>/></endfold id='5'>; // No Error

// OK
let k1 = <beginfold id='5'><Comp</beginfold id='5'> a=<beginfold id='6'>{</beginfold id='6'>10<endfold id='6'>}</endfold id='6'> b="hi"><beginfold id='4'><></beginfold id='4'><endfold id='4'></></endfold id='4'><beginfold id='5'><Button</beginfold id='5'> <endfold id='5'>/></endfold id='5'><beginfold id='5'><AnotherButton</beginfold id='5'> <endfold id='5'>/></endfold id='5'></Comp<endfold id='5'>></endfold id='5'>;
let k2 = <beginfold id='5'><Comp</beginfold id='5'> a=<beginfold id='6'>{</beginfold id='6'>10<endfold id='6'>}</endfold id='6'> b="hi"><beginfold id='4'><></beginfold id='4'><beginfold id='5'><Button</beginfold id='5'> <endfold id='5'>/></endfold id='5'><endfold id='4'></></endfold id='4'><beginfold id='5'><AnotherButton</beginfold id='5'> <endfold id='5'>/></endfold id='5'></Comp<endfold id='5'>></endfold id='5'>;
let k3 = <beginfold id='5'><Comp</beginfold id='5'> a=<beginfold id='6'>{</beginfold id='6'>10<endfold id='6'>}</endfold id='6'> b="hi"><beginfold id='4'><></beginfold id='4'><beginfold id='5'><Button</beginfold id='5'> <endfold id='5'>/></endfold id='5'><beginfold id='5'><AnotherButton</beginfold id='5'> <endfold id='5'>/></endfold id='5'><endfold id='4'></></endfold id='4'></Comp<endfold id='5'>></endfold id='5'>;
let k4 = <beginfold id='5'><SingleChildComp</beginfold id='5'> a=<beginfold id='6'>{</beginfold id='6'>10<endfold id='6'>}</endfold id='6'> b="hi"><beginfold id='4'><></beginfold id='4'><beginfold id='5'><Button</beginfold id='5'> <endfold id='5'>/></endfold id='5'><beginfold id='5'><AnotherButton</beginfold id='5'> <endfold id='5'>/></endfold id='5'><endfold id='4'></></endfold id='4'></SingleChildComp<endfold id='5'>></endfold id='5'>;
// OK
let k1 = <beginfold id='4'><div</beginfold id='4'>> <beginfold id='4'><h2</beginfold id='4'>> Hello </h2<endfold id='4'>></endfold id='4'> <beginfold id='4'><h1</beginfold id='4'>> world </h1<endfold id='4'>></endfold id='4'></div<endfold id='4'>></endfold id='4'>;
let k2 = <beginfold id='4'><div</beginfold id='4'>> <beginfold id='4'><h2</beginfold id='4'>> Hello </h2<endfold id='4'>></endfold id='4'> <beginfold id='6'>{</beginfold id='6'>(user: any) => <beginfold id='4'><h2</beginfold id='4'>><beginfold id='6'>{</beginfold id='6'>user.name<endfold id='6'>}</endfold id='6'></h2<endfold id='4'>></endfold id='4'><endfold id='6'>}</endfold id='6'></div<endfold id='4'>></endfold id='4'>;
let k3 = <beginfold id='4'><div</beginfold id='4'>> <beginfold id='6'>{</beginfold id='6'>1<endfold id='6'>}</endfold id='6'> <beginfold id='6'>{</beginfold id='6'>"That is a number"<endfold id='6'>}</endfold id='6'> </div<endfold id='4'>></endfold id='4'>;
let k4 = <beginfold id='5'><Button</beginfold id='5'>> <beginfold id='4'><h2</beginfold id='4'>> Hello </h2<endfold id='4'>></endfold id='4'> </Button<endfold id='5'>></endfold id='5'>;

// Empty tags
hello<>
hello<string>

<beginfold id='4'><></beginfold id='4'><endfold id='4'></></endfold id='4'>; // no whitespace
<beginfold id='4'><    ></beginfold id='4'><endfold id='4'></   ></endfold id='4'>; // lots of whitespace
< <beginfold id='15'>/*</beginfold id='15'>starting wrap<endfold id='15'>*/</endfold id='15'> ></ <beginfold id='15'>/*</beginfold id='15'>ending wrap<endfold id='15'>*/</endfold id='15'>>; // comments in the tags
<beginfold id='4'><></beginfold id='4'>hi<endfold id='4'></></endfold id='4'>; // text inside
<beginfold id='4'><></beginfold id='4'><beginfold id='4'><span</beginfold id='4'>>hi</span<endfold id='4'>></endfold id='4'><beginfold id='4'><div</beginfold id='4'>>bye</div<endfold id='4'>></endfold id='4'><endfold id='4'></></endfold id='4'>; // children
<beginfold id='4'><></beginfold id='4'><beginfold id='4'><span</beginfold id='4'>>1</span<endfold id='4'>></endfold id='4'><beginfold id='4'><></beginfold id='4'><beginfold id='4'><span</beginfold id='4'>>2.1</span<endfold id='4'>></endfold id='4'><beginfold id='4'><span</beginfold id='4'>>2.2</span<endfold id='4'>></endfold id='4'><endfold id='4'></></endfold id='4'><beginfold id='4'><span</beginfold id='4'>>3</span<endfold id='4'>></endfold id='4'><endfold id='4'></></endfold id='4'>; // nested fragments
<beginfold id='4'><></beginfold id='4'>#<endfold id='4'></></endfold id='4'>; // # would cause scanning error if not in jsxtext

// Tags after substitutions in templates
<beginfold id='1'>`</beginfold id='1'>aaa${<beginfold id='4'><tag</beginfold id='4'>></tag<endfold id='4'>></endfold id='4'>//comment
    <beginfold id='15'>/*</beginfold id='15'>comment<endfold id='15'>*/</endfold id='15'><beginfold id='5'><A</beginfold id='5'><endfold id='5'>/></endfold id='5'>}<endfold id='1'>`</endfold id='1'>

// Don't highlight tags within type declaration
type T12 = ReturnType<(<T>() => T)>;
type T13 = ReturnType<(<T extends U, U extends number<beginfold id='8'>[</beginfold id='8'><endfold id='8'>]</endfold id='8'>>() => T)>;
type T14 = ReturnType<typeof f1>;
type T15 = ReturnType<(s: string) => void>;

// Don't highlight tags within variable declaration
let myIdentity: <T>(arg: T) => T <noTag/> = <beginfold id='5'><Tag</beginfold id='5'> <endfold id='5'>/></endfold id='5'>;
var myIdentity: <U>(arg: U) => U = identity;
const myIdentity: <beginfold id='7'>{</beginfold id='7'><T>(arg: T): T<endfold id='7'>}</endfold id='7'> = identity;

// Don't highlight tags within interfaces and classes
interface GenericIdentityFn <beginfold id='2'>{</beginfold id='2'>
    <T>(arg: T): T;
    <noTag />
<endfold id='2'>}</endfold id='2'>
class Handler <beginfold id='2'>{</beginfold id='2'>
    info: <T>(arg: T): T <noTag />;
    <beginfold id='4'><tag</beginfold id='4'>> </tag<endfold id='4'>></endfold id='4'>
<endfold id='2'>}</endfold id='2'>

// Highlight "<T extends" as a type assertion, not as a tag
// (the "cast" expression works and isn't supported in the TSX file)
const goodHighlighting = <T extends I>(
  arg: T
) => <beginfold id='2'>{</beginfold id='2'>
  const a = arg
  return a
<endfold id='2'>}</endfold id='2'>
<beginfold id='4'><tag</beginfold id='4'>> text <beginfold id='5'><T</beginfold id='5'> extends I<endfold id='5'>/></endfold id='5'> </tag<endfold id='4'>></endfold id='4'> // Here "<T extends I/>" is a tag

// Check character after tag name, do not highlight invalid tags
<noTag  ?
<noTag  ,
<noTag <beginfold id='15'>/*</beginfold id='15'> comment <endfold id='15'>*/</endfold id='15'> ?
<noTag#
<noTag<beginfold id='15'>/*</beginfold id='15'>comment<endfold id='15'>*/</endfold id='15'>#

// Conditionals expressions
let y = foo == null ? null : <beginfold id='5'><Tag</beginfold id='5'><endfold id='5'>/></endfold id='5'>;
let x = (foo === null || foo === undefined) ?
    undefined :<beginfold id='4'><tag</beginfold id='4'>>hello</tag<endfold id='4'>></endfold id='4'>;

// Tagged template literals
tagFunc<beginfold id='1'>`</beginfold id='1'>
    Hello world!
    ${ <beginfold id='5'><Tag</beginfold id='5'> <endfold id='5'>/></endfold id='5'>; 22 + "11" }<endfold id='1'>`</endfold id='1'>;
obj.something.tagFunc<beginfold id='1'>`</beginfold id='1'>Setting ${setting} is ${value}!<endfold id='1'>`</endfold id='1'>;
