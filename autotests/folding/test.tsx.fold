// TypeScript React

<beginfold id='13'>/** </beginfold id='13'>@author Willy <willy@wmail.com>
  * @url https://reactjs.org/ *<endfold id='13'>*/</endfold id='13'>

import React from 'react';
import <beginfold id='1'>{</beginfold id='1'> PhotoStory, VideoStory <endfold id='1'>}</endfold id='1'> from './stories';

function Story(props) <beginfold id='1'>{</beginfold id='1'>
  const SpecificStory = components<beginfold id='2'>[</beginfold id='2'>props.storyType<endfold id='2'>]</endfold id='2'>;
  return <beginfold id='4'><SpecificStory</beginfold id='4'> story=<beginfold id='5'>{</beginfold id='5'> props.story <endfold id='5'>}</endfold id='5'> attr2="&ref;" attr3="Hello\n" <endfold id='4'>/></endfold id='4'>;
<endfold id='1'>}</endfold id='1'>

function
<beginfold id='4'><Tag</beginfold id='4'> attr1=<beginfold id='5'>{</beginfold id='5'> <beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'> function <noTag/> return class var 0x123 <beginfold id='1'>{</beginfold id='1'> <endfold id='1'>}</endfold id='1'> &noRef; hello() React.Component() <endfold id='5'>}</endfold id='5'> attr2="&ref;">
	/* no comment*/ function <beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'> return class var 0x123 &ref; hello() React.Component()
	.<beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'> anyWord <beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'>
	<beginfold id='5'>{</beginfold id='5'> function <tag> return class var 0x123 hello() React.Component() <endfold id='5'>}</endfold id='5'>
</Tag<endfold id='4'>></endfold id='4'>

<beginfold id='3'><tag1</beginfold id='3'>> </tag1<endfold id='3'>></endfold id='3'>
<beginfold id='3'><tag1</beginfold id='3'>> </Tag$<endfold id='3'>></endfold id='3'>
<beginfold id='4'><Tag$</beginfold id='4'>> </tag<endfold id='4'>></endfold id='4'>

<beginfold id='3'><tag</beginfold id='3'><beginfold id='12'>/*</beginfold id='12'>comment<endfold id='12'>*/</endfold id='12'>attr1<beginfold id='12'>/*</beginfold id='12'>comment<endfold id='12'>*/</endfold id='12'>= <beginfold id='12'>/*</beginfold id='12'>comment<endfold id='12'>*/</endfold id='12'>"value"<beginfold id='12'>/*</beginfold id='12'>comment<endfold id='12'>*/</endfold id='12'>attr2 <beginfold id='12'>/*</beginfold id='12'>comment<endfold id='12'>*/</endfold id='12'>attr3='a' key<beginfold id='12'>/*</beginfold id='12'>comment<endfold id='12'>*/</endfold id='12'>key2 <endfold id='3'>/></endfold id='3'>

// Detect Valid tags

<beginfold id='12'>/*</beginfold id='12'> comment <endfold id='12'>*/</endfold id='12'> <beginfold id='3'><tag</beginfold id='3'>></tag<endfold id='3'>></endfold id='3'>
<beginfold id='1'>{ </beginfold id='1'><beginfold id='12'>/*</beginfold id='12'> comment
	<endfold id='12'>*/</endfold id='12'> <beginfold id='4'><Tag</beginfold id='4'> <endfold id='4'>/></endfold id='4'>
	word <noTag/> . <noTag/> <endfold id='1'>}</endfold id='1'> <noTag/>
return <beginfold id='12'>/*</beginfold id='12'> comment
	multiline <endfold id='12'>*/</endfold id='12'> <beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'> <beginfold id='12'>/*</beginfold id='12'> comment <endfold id='12'>*/</endfold id='12'> <beginfold id='4'><Tag</beginfold id='4'><endfold id='4'>/></endfold id='4'>
&& <beginfold id='12'>/*</beginfold id='12'>comment<endfold id='12'>*/</endfold id='12'> <beginfold id='4'><Tag</beginfold id='4'><endfold id='4'>/></endfold id='4'>
& <beginfold id='12'>/*</beginfold id='12'>comment<endfold id='12'>*/</endfold id='12'> <noTag/>

  <beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'>
<beginfold id='1'>{ </beginfold id='1'><beginfold id='3'><hello</beginfold id='3'>>Hello</hello<endfold id='3'>></endfold id='3'> <endfold id='1'>}</endfold id='1'>
?<beginfold id='4'><Tag</beginfold id='4'> <endfold id='4'>/></endfold id='4'>;
<beginfold id='2'>[ </beginfold id='2'><beginfold id='3'><tag</beginfold id='3'> <endfold id='3'>/></endfold id='3'>  ( <beginfold id='3'><tag</beginfold id='3'> <endfold id='3'>/></endfold id='3'>
,<beginfold id='4'><Tag</beginfold id='4'><endfold id='4'>/></endfold id='4'>    =<beginfold id='4'><Tag</beginfold id='4'><endfold id='4'>/></endfold id='4'>
&&<beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'>   ||<beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'>
return <beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'> ;
default<beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'> ;
<beginfold id='4'><Tag</beginfold id='4'>> <beginfold id='3'><tag</beginfold id='3'>> <beginfold id='4'><tag$</beginfold id='4'><endfold id='4'>/></endfold id='4'> </tag<endfold id='3'>></endfold id='3'> return </Tag<endfold id='4'>></endfold id='4'>

anyWord<noTag>
anyWord<beginfold id='12'>/*</beginfold id='12'>comment<endfold id='12'>*/</endfold id='12'> <noTag/>
.<noTag>
&<notag> | <noTag/>
% <beginfold id='12'>/*</beginfold id='12'> comment<endfold id='12'>*/</endfold id='12'> <noTag/>

// TODO: Fix this (comment before the tag name):
var x = <<beginfold id='12'>/*</beginfold id='12'><endfold id='12'>*/</endfold id='12'>div></div>;

// Tag after ":"
annotation: <beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'>
annotation: text <beginfold id='2'>[</beginfold id='2'> <beginfold id='3'><tag</beginfold id='3'><endfold id='3'>/></endfold id='3'> <endfold id='2'>]</endfold id='2'>
console.log("hello")

// Type assertion in tag
<beginfold id='4'><C</beginfold id='4'><number><endfold id='4'>/></endfold id='4'>
<beginfold id='4'><C</beginfold id='4'><number>> </C<endfold id='4'>></endfold id='4'>
<beginfold id='4'><C</beginfold id='4'>
<error <endfold id='4'>/></endfold id='4'>

// Non-ASCII tag name & attribute
<beginfold id='4'><日本語</beginfold id='4'>></日本語<endfold id='4'>></endfold id='4'>;
<beginfold id='4'><Component</beginfold id='4'> 本本:本-本 aa本:本 aa:aa <endfold id='4'>/></endfold id='4'>
<beginfold id='4'><aaaa:ñ</beginfold id='4'> <endfold id='4'>/></endfold id='4'>

<beginfold id='4'><Namespace.DeepNamespace.Component</beginfold id='4'> <endfold id='4'>/></endfold id='4'>;
<beginfold id='4'><Component</beginfold id='4'> <beginfold id='5'>{</beginfold id='5'> ... x <endfold id='5'>}</endfold id='5'> y
=<beginfold id='5'>{</beginfold id='5'>2 <endfold id='5'>}</endfold id='5'> z <endfold id='4'>/></endfold id='4'>;

let k1 =
    <beginfold id='4'><Comp</beginfold id='4'> a=<beginfold id='5'>{</beginfold id='5'>10<endfold id='5'>}</endfold id='5'> b="hi" <beginfold id='5'>{</beginfold id='5'>...o<endfold id='5'>}</endfold id='5'> >
        hi hi hi!
    </Comp<endfold id='4'>></endfold id='4'>;

let k2 =
    <beginfold id='4'><Comp</beginfold id='4'> a=<beginfold id='5'>{</beginfold id='5'>10<endfold id='5'>}</endfold id='5'> b="hi">
        <beginfold id='3'><div</beginfold id='3'>> My Div </div<endfold id='3'>></endfold id='3'>
        <beginfold id='5'>{</beginfold id='5'>(name: string) => <beginfold id='3'><div</beginfold id='3'>> My name <beginfold id='5'>{</beginfold id='5'>name<endfold id='5'>}</endfold id='5'> </div<endfold id='3'>></endfold id='3'><endfold id='5'>}</endfold id='5'>
    </Comp<endfold id='4'>></endfold id='4'>;

let k3 = <beginfold id='4'><GenericComponent</beginfold id='4'> initialValues=<beginfold id='5'>{</beginfold id='5'><beginfold id='1'>{</beginfold id='1'> x: "y" <endfold id='1'>}</endfold id='1'><endfold id='5'>}</endfold id='5'> nextValues=<beginfold id='5'>{</beginfold id='5'>a => (<beginfold id='1'>{</beginfold id='1'> x: a.x <endfold id='1'>}</endfold id='1'>)<endfold id='5'>}</endfold id='5'> <endfold id='4'>/></endfold id='4'>; // No Error

// OK
let k1 = <beginfold id='4'><Comp</beginfold id='4'> a=<beginfold id='5'>{</beginfold id='5'>10<endfold id='5'>}</endfold id='5'> b="hi"><beginfold id='3'><></beginfold id='3'><endfold id='3'></></endfold id='3'><beginfold id='4'><Button</beginfold id='4'> <endfold id='4'>/></endfold id='4'><beginfold id='4'><AnotherButton</beginfold id='4'> <endfold id='4'>/></endfold id='4'></Comp<endfold id='4'>></endfold id='4'>;
let k2 = <beginfold id='4'><Comp</beginfold id='4'> a=<beginfold id='5'>{</beginfold id='5'>10<endfold id='5'>}</endfold id='5'> b="hi"><beginfold id='3'><></beginfold id='3'><beginfold id='4'><Button</beginfold id='4'> <endfold id='4'>/></endfold id='4'><endfold id='3'></></endfold id='3'><beginfold id='4'><AnotherButton</beginfold id='4'> <endfold id='4'>/></endfold id='4'></Comp<endfold id='4'>></endfold id='4'>;
let k3 = <beginfold id='4'><Comp</beginfold id='4'> a=<beginfold id='5'>{</beginfold id='5'>10<endfold id='5'>}</endfold id='5'> b="hi"><beginfold id='3'><></beginfold id='3'><beginfold id='4'><Button</beginfold id='4'> <endfold id='4'>/></endfold id='4'><beginfold id='4'><AnotherButton</beginfold id='4'> <endfold id='4'>/></endfold id='4'><endfold id='3'></></endfold id='3'></Comp<endfold id='4'>></endfold id='4'>;
let k4 = <beginfold id='4'><SingleChildComp</beginfold id='4'> a=<beginfold id='5'>{</beginfold id='5'>10<endfold id='5'>}</endfold id='5'> b="hi"><beginfold id='3'><></beginfold id='3'><beginfold id='4'><Button</beginfold id='4'> <endfold id='4'>/></endfold id='4'><beginfold id='4'><AnotherButton</beginfold id='4'> <endfold id='4'>/></endfold id='4'><endfold id='3'></></endfold id='3'></SingleChildComp<endfold id='4'>></endfold id='4'>;
// OK
let k1 = <beginfold id='3'><div</beginfold id='3'>> <beginfold id='3'><h2</beginfold id='3'>> Hello </h2<endfold id='3'>></endfold id='3'> <beginfold id='3'><h1</beginfold id='3'>> world </h1<endfold id='3'>></endfold id='3'></div<endfold id='3'>></endfold id='3'>;
let k2 = <beginfold id='3'><div</beginfold id='3'>> <beginfold id='3'><h2</beginfold id='3'>> Hello </h2<endfold id='3'>></endfold id='3'> <beginfold id='5'>{</beginfold id='5'>(user: any) => <beginfold id='3'><h2</beginfold id='3'>><beginfold id='5'>{</beginfold id='5'>user.name<endfold id='5'>}</endfold id='5'></h2<endfold id='3'>></endfold id='3'><endfold id='5'>}</endfold id='5'></div<endfold id='3'>></endfold id='3'>;
let k3 = <beginfold id='3'><div</beginfold id='3'>> <beginfold id='5'>{</beginfold id='5'>1<endfold id='5'>}</endfold id='5'> <beginfold id='5'>{</beginfold id='5'>"That is a number"<endfold id='5'>}</endfold id='5'> </div<endfold id='3'>></endfold id='3'>;
let k4 = <beginfold id='4'><Button</beginfold id='4'>> <beginfold id='3'><h2</beginfold id='3'>> Hello </h2<endfold id='3'>></endfold id='3'> </Button<endfold id='4'>></endfold id='4'>;

// Empty tags
hello<>
hello<string>

<beginfold id='3'><></beginfold id='3'><endfold id='3'></></endfold id='3'>; // no whitespace
<beginfold id='3'><    ></beginfold id='3'><endfold id='3'></   ></endfold id='3'>; // lots of whitespace
< <beginfold id='12'>/*</beginfold id='12'>starting wrap<endfold id='12'>*/</endfold id='12'> ></ <beginfold id='12'>/*</beginfold id='12'>ending wrap<endfold id='12'>*/</endfold id='12'>>; // comments in the tags
<beginfold id='3'><></beginfold id='3'>hi<endfold id='3'></></endfold id='3'>; // text inside
<beginfold id='3'><></beginfold id='3'><beginfold id='3'><span</beginfold id='3'>>hi</span<endfold id='3'>></endfold id='3'><beginfold id='3'><div</beginfold id='3'>>bye</div<endfold id='3'>></endfold id='3'><endfold id='3'></></endfold id='3'>; // children
<beginfold id='3'><></beginfold id='3'><beginfold id='3'><span</beginfold id='3'>>1</span<endfold id='3'>></endfold id='3'><beginfold id='3'><></beginfold id='3'><beginfold id='3'><span</beginfold id='3'>>2.1</span<endfold id='3'>></endfold id='3'><beginfold id='3'><span</beginfold id='3'>>2.2</span<endfold id='3'>></endfold id='3'><endfold id='3'></></endfold id='3'><beginfold id='3'><span</beginfold id='3'>>3</span<endfold id='3'>></endfold id='3'><endfold id='3'></></endfold id='3'>; // nested fragments
<beginfold id='3'><></beginfold id='3'>#<endfold id='3'></></endfold id='3'>; // # would cause scanning error if not in jsxtext

// Tags after substitutions in templates
`aaa${<beginfold id='3'><tag</beginfold id='3'>></tag<endfold id='3'>></endfold id='3'>//comment
    <beginfold id='12'>/*</beginfold id='12'>comment<endfold id='12'>*/</endfold id='12'><beginfold id='4'><A</beginfold id='4'><endfold id='4'>/></endfold id='4'>}`

// Don't highlight tags within type declaration
type T12 = ReturnType<(<T>() => T)>;
type T13 = ReturnType<(<T extends U, U extends number<beginfold id='7'>[</beginfold id='7'><endfold id='7'>]</endfold id='7'>>() => T)>;
type T14 = ReturnType<typeof f1>;
type T15 = ReturnType<(s: string) => void>;

// Don't highlight tags within variable declaration
let myIdentity: <T>(arg: T) => T <noTag/> = <beginfold id='4'><Tag</beginfold id='4'> <endfold id='4'>/></endfold id='4'>;
var myIdentity: <U>(arg: U) => U = identity;
const myIdentity: <beginfold id='6'>{</beginfold id='6'><T>(arg: T): T<endfold id='6'>}</endfold id='6'> = identity;

// Don't highlight tags within interfaces and classes
interface GenericIdentityFn <beginfold id='1'>{</beginfold id='1'>
    <T>(arg: T): T;
    <noTag />
<endfold id='1'>}</endfold id='1'>
class Handler <beginfold id='1'>{</beginfold id='1'>
    info: <T>(arg: T): T <noTag />;
    <beginfold id='3'><tag</beginfold id='3'>> </tag<endfold id='3'>></endfold id='3'>
<endfold id='1'>}</endfold id='1'>

// Highlight "<T extends" as a type assertion, not as a tag
// (the "cast" expression works and isn't supported in the TSX file)
const goodHighlighting = <T extends I>(
  arg: T
) => <beginfold id='1'>{</beginfold id='1'>
  const a = arg
  return a
<endfold id='1'>}</endfold id='1'>
<beginfold id='3'><tag</beginfold id='3'>> text <beginfold id='4'><T</beginfold id='4'> extends I<endfold id='4'>/></endfold id='4'> </tag<endfold id='3'>></endfold id='3'> // Here "<T extends I/>" is a tag

// Check character after tag name, do not highlight invalid tags
<noTag  ?
<noTag  ,
<noTag <beginfold id='12'>/*</beginfold id='12'> comment <endfold id='12'>*/</endfold id='12'> ?
<noTag#
<noTag<beginfold id='12'>/*</beginfold id='12'>comment<endfold id='12'>*/</endfold id='12'>#

// Conditionals expressions
let y = foo == null ? null : <beginfold id='4'><Tag</beginfold id='4'><endfold id='4'>/></endfold id='4'>;
let x = (foo === null || foo === undefined) ?
    undefined :<beginfold id='3'><tag</beginfold id='3'>>hello</tag<endfold id='3'>></endfold id='3'>;
